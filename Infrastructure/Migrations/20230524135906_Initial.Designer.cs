// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230524135906_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.BookingMeetingRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateMeeting")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTimeMeeting")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("MeetingRoomId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("StartTimeMeeting")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MeetingRoomId");

                    b.ToTable("BookingMeetingRooms");
                });

            modelBuilder.Entity("Domain.Models.MeetingRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("NameIndex");

                    b.ToTable("MeetingRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbe22759-12c7-40e1-af84-66d3bffe3cce"),
                            Description = "Описание переговорной комнаты.",
                            Name = "Переговорная комната 1."
                        },
                        new
                        {
                            Id = new Guid("9f78e173-f484-42c6-b82d-ce6ffecf9220"),
                            Description = "Описание переговорной комнаты.",
                            Name = "Переговорная комната 2."
                        },
                        new
                        {
                            Id = new Guid("d2e32f34-83c3-4fbe-9243-92c71c8b631b"),
                            Description = "Описание переговорной комнаты.",
                            Name = "Переговорная комната 3."
                        },
                        new
                        {
                            Id = new Guid("6e63e69e-77b1-419f-9a39-a3ff2f433763"),
                            Description = "Описание переговорной комнаты.",
                            Name = "Переговорная комната 4."
                        },
                        new
                        {
                            Id = new Guid("0011e572-1fc7-4311-bc49-baa947e3160b"),
                            Description = "Описание переговорной комнаты.",
                            Name = "Переговорная комната 5."
                        });
                });

            modelBuilder.Entity("Domain.Models.BookingMeetingRoom", b =>
                {
                    b.HasOne("Domain.Models.MeetingRoom", null)
                        .WithMany("BookingMeetingRooms")
                        .HasForeignKey("MeetingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.MeetingRoom", b =>
                {
                    b.Navigation("BookingMeetingRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
